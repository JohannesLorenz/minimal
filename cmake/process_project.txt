#PROJECT_NAME
#VERSION

SET(VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")

MESSAGE("")
MESSAGE("WELCOME")
MESSAGE("This is the Makefile for `${PROJECT_NAME} ${VERSION}'")
MESSAGE("")
MESSAGE(STATUS "Reading configuration...")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/modules/")

# MESSAGE("Options: (-D...=..., cmake -L for details)")
# MESSAGE(" * COMPILER: ${COMPILER} (allowed: [gcc|clang])")

# TODO: move a lot of stuff to src directory

# variables -> src, above
SET(COMPILER "" CACHE STRING "Compiler to use (allowed: [gcc|clang|stoat])")
SET(ZYN_BINARY "" CACHE STRING "/usr/bin/zynaddsubfx")

# testing -> src?
enable_testing ()

# compiler detail
if(COMPILER STREQUAL "stoat")
	SET(CMAKE_BUILD_TYPE "Debug") # for line detection etc
else()
if(NOT CMAKE_BUILD_TYPE STREQUAL "Debug")
if(NOT CMAKE_BUILD_TYPE STREQUAL "Release")
	message(FATAL_ERROR "Please set -DCMAKE_BUILD_TYPE=[Debug|Release]")
endif()
endif()
endif()

if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/submodules/CMakeLists.txt")
	set(HAS_SUBMODULES true)
else()
	set(HAS_SUBMODULES false)
endif()

# directories
SET(src_base "${CMAKE_CURRENT_SOURCE_DIR}/src/")
include_directories("${CMAKE_CURRENT_BINARY_DIR}/src/") # for config.h
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/src/include")
if(HAS_SUBMODULES)
	include_directories("${CMAKE_CURRENT_SOURCE_DIR}/submodules")
endif()

# functions
function(m_cp script_name)
	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${script_name}
		${CMAKE_CURRENT_BINARY_DIR}/${script_name} COPYONLY)
endfunction()

# special headers -> src?
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/src/config.h.in
	${CMAKE_CURRENT_BINARY_DIR}/src/config.h)
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/src/version.h.in
	${CMAKE_CURRENT_BINARY_DIR}/src/version.h)

# libraries -> src?
MESSAGE(STATUS "Checking for libraries...")

# src?, probably above?

# TODO?!?
find_package(PkgConfig REQUIRED)

#set(Boost_USE_STATIC_LIBS OFF)
#set(Boost_USE_MULTITHREADED OFF)
#set(Boost_USE_STATIC_RUNTIME OFF)
#find_package(Boost 1.49.0
#	REQUIRED
#	COMPONENTS graph)

#todo: -> rtosc?
#pkg_search_module(LIBLO liblo>=0.25 REQUIRED)
#mark_as_advanced(LIBLO_LIBRARIES)
#include_directories(${LIBLO_INCLUDE_DIRS})
#
#list(APPEND AUDIO_LIBRARIES ${LIBLO_LIBRARIES})
#list(APPEND AUDIO_LIBRARY_DIRS ${LIBLO_LIBRARY_DIRS})

#pkg_check_modules(JACK jack)
#
#SET (JackEnable ${JACK_FOUND} CACHE BOOL
#	"Enable support for JACK Audio Connection toolKit")

#if(JackEnable)
##	list(APPEND AUDIO_LIBRARIES ${JACK_LIBRARIES})
#	list(APPEND AUDIO_LIBRARY_DIRS ${JACK_LIBRARY_DIRS})
#	add_definitions(-DJACK=1)
#endif(JackEnable)

#pkg_check_modules(SNDFILE sndfile)
#list(APPEND AUDIO_LIBRARIES ${SNDFILE_LIBRARIES})
#list(APPEND AUDIO_LIBRARY_DIRS ${SNDFILE_LIBRARY_DIRS})

# own submodules

macro(find_submodules submodules)
	foreach(submodule ${submodules})
		string(REGEX REPLACE "[^A-Za-z].*" "" fname ${submodule})
		MESSAGE("FNAME: ${fname} vs ${submodule}")

		SET(CUR_FOUND "0")
		SET(CUR_LIBRARIES "")
		SET(CUR_LIBRARY_DIRS "")

		pkg_search_module(CUR ${submodule})
		# MESSAGE(${PC_MODULE_FOUND})
		if(PC_${fname}_FOUND STREQUAL "1")
			list(APPEND AUDIO_LIBRARIES ${CUR_LIBRARIES})
			list(APPEND AUDIO_LIBRARY_DIRS ${CUR_LIBRARY_DIRS})
		else()
			#MESSAGE(STATUS "submodule nf: ${submodule}")
			add_custom_target(${fname}_fetch COMMAND "echo" "FETCHING SUBMODULE")
			list(APPEND COMPILED_SUBMODULES ${fname})
		endif()
	endforeach()
endmacro()

# todo: ask git ;)
# list(APPEND submodules threadpool>=0.8.0 ringbuffer>=0.8.0)
# find_submodules("${submodules}")

# MESSAGE("ALD now: ${AUDIO_LIBRARY_DIRS}")
# link_directories(${AUDIO_LIBRARY_DIRS}) -> TODO: src

# add_custom_target(init "git" "submodule" "init" "--" ${COMPILED_SUBMODULES})
# add_custom_target(fetch git submodule update)
# add_dependencies(fetch init)


# note: the order of -Wall -Wno-unknown-pragmas is important
# TODO: -Werror
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wextra -Wall ${WARN_EXC} -std=c++11 -pipe")
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 ${FLTO_FLAGS}")

# install paths
get_property(LIB64 GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS)
if("${LIB64}" STREQUAL "TRUE")
    set(LIBSUFFIX 64)
else()
    set(LIBSUFFIX "")
endif()

set(INSTALL_LIB_DIR "lib${LIBSUFFIX}" CACHE PATH "Installation directory for libraries")
set(INSTALL_INC_DIR "include" CACHE PATH "Installation directory for headers")
mark_as_advanced(
	INSTALL_LIB_DIR
	INSTALL_INC_DIR
	)

# subdirectories
MESSAGE("READING SUB-DIRECTORIES...")
#add_subdirectory(rtosc)
# TODO: if exists:
if(HAS_SUBMODULES)
	add_subdirectory(submodules)
endif()
add_subdirectory(src)
add_subdirectory(doc)

macro(depend_submodules submodules)
	foreach(submodule ${submodules})
		string(REGEX REPLACE "[^A-Za-z].*" "" fname ${submodule})
		MESSAGE("FNAME: ${fname} vs ${submodule}")

		SET(CUR_FOUND "0")
		SET(CUR_LIBRARIES "")
		SET(CUR_LIBRARY_DIRS "")

		pkg_search_module(CUR ${submodule})
		# MESSAGE(${PC_MODULE_FOUND})
		if(PC_${fname}_FOUND STREQUAL "1")
		else()
			add_dependencies(${fname} ${fname}_fetch)
		endif()
	endforeach()
endmacro()

depend_submodules("${submodules}")

# custom targets
#add_custom_target(stoat2 stoat -c
#	-w /usr/local/share/stoat/whitelist.txt
#	-b /usr/local/share/stoat/blacklist.txt
#	-w ${CMAKE_CURRENT_SOURCE_DIR}/data/stoat_suppression_list.txt
#	-w ${CMAKE_CURRENT_SOURCE_DIR}/src/include/ringbuffer/data/stoat_suppression_list.txt
#	-r ${CMAKE_CURRENT_BINARY_DIR}/src/)

# SET(DESCRIPTION "a minimal osc sequencer")

# CPack
SET(MY_NAME_CAP ${PROJECT_NAME})
#SET(MY_NAME_LOW ${PROJECT_NAME}) # (TODO: tolower)
STRING(TOLOWER ${MY_NAME_CAP} MY_NAME_LOW)
#SET(MY_PACKAGE_FILE_NAME "${MY_NAME_LOW}-${VERSION}-${OS}-${MY_HOST_STR}")
SET(MY_PACKAGE_FILE_NAME "${MY_NAME_LOW}-${VERSION}")
SET(MY_SRC_PACKAGE_FILE_NAME "${MY_NAME_LOW}-${VERSION}")

SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${MY_NAME_CAP} - ${DESCRIPTION}")
IF(WIN32)
SET(CPACK_PACKAGE_EXECUTABLES "${MY_NAME_LOW}.exe") # TODO: discard windows
ELSE(WIN32)
SET(CPACK_PACKAGE_EXECUTABLES "${MY_NAME_LOW}")
SET(CPACK_STRIP_FILES "bin/${MY_NAME_LOW}") # TODO: bin? # TODO: what is this?
ENDIF(WIN32)
SET(CPACK_PACKAGE_FILE_NAME ${MY_PACKAGE_FILE_NAME})
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${MY_SRC_PACKAGE_FILE_NAME}")
SET(CPACK_PACKAGE_VENDOR "${MY_NAME_CAP} developers")
SET(CPACK_PACKAGE_VERSION ${VERSION})
SET(CPACK_PACKAGE_VERSION_MAJOR ${VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${VERSION_PATCH})
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE.txt")
SET(CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/README.md")
SET(CPACK_SOURCE_GENERATOR "TBZ2")
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${MY_SRC_PACKAGE_FILE_NAME}")
INCLUDE(CPack)

# summary
# TODO: make this colored like in zyn
function(print_summary_base)
	MESSAGE("")
	MESSAGE("SUMMARY:")
	MESSAGE(" * Project: ${PROJECT_NAME} ${VERSION}")
	MESSAGE(" * Compilers Used: ${COMPILER} (${CMAKE_CXX_COMPILER}, ${CMAKE_CC_COMPILER})")
	if(CMAKE_BUILD_TYPE STREQUAL "Debug")
		set(MSG_BUILD_TYPE_FLAG ${CMAKE_CXX_FLAGS_DEBUG})
	else()
		set(MSG_BUILD_TYPE_FLAG ${CMAKE_CXX_FLAGS_RELEASE})
	endif()
	MESSAGE(" * Build Type: ${CMAKE_BUILD_TYPE} (${MSG_BUILD_TYPE_FLAG})")
#MESSAGE(" * Zyn binary (-DZYN_BINARY): ${ZYN_BINARY}")
	MESSAGE(" * Building Doc: No - Type make doc if you want")
	MESSAGE(" * Executing Tests: No - Type make test if you want")
#	MESSAGE("")
#	MESSAGE("Now, type make and pray...")
#	MESSAGE("")
endfunction()
